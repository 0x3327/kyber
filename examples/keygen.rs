use kyber::*;
use std::{fmt::Write, num::ParseIntError};

const PKS: &str = "BFC19503C98E88810353F8492E57C71725A25F494F9CACA7E64B1A3361389631691516286E5A39893C9D8A473A79202F303A8B3E9B57A3505F29B907C1DC1EEB3A3E992685C6E914F7E6CF48D4A0CC5345B1546726CA285545639E5C041F88219C0B504A23486B0B48F6ECCC5654223728C19B88869AA1B81D466A62360FE7CC349DD290D7AC2663DB0573667A560ABE2C77C71AD92353EBADE4D821C681246B429E6EF27884BA4C18F3049C8032F13B614AF6080DD6517471C2A343AFCFA0BA498286E1E53F5F2023911A2C8448A3554547B526A8E4D45733FC67DD9255E7E9135B923D19E35682FB83AD7756F7468B78D29B2F592B3F40CDD84A8A551A0FE10031D631A3EE710AFF2B84506A6065B60161DC90A8B86E33365C4F73AEACC78F3E41593CE1BB7D332F249B436EE499260B80570B54E6743D90EC0938716F80152F064093F2F52ACCC2255FA39E747777296A933F6C75BE72C10D1A671959C2F414736B059F718729AE5A1F341B636B24A1651A6FE0182EBF004F683B1E7BD83D6ED25D9A3A28C6323149860B90EB703D121F98646BD0C56AADE90B5A39CFF3C688C9DB0723A8B8016A939A366CCF37754CDB95920503D4C4B3C6522FFA29CB8DBAC31FD0A701C5924DB6651ACBB8CE78244D1093C2A00AC7F364F1BBAB3CE905DBBC6949763783C54FAEA72A957018CFA9B9FCC83CEC2CAD6ECA84502A14F2F9A530199B48D904C55979995CB44DD5A215D93F374A1AA1B06049F82AFD875A82173CAD905F9F57A66A2ABEAF25788263B86B72B8CA1668C6115E828B5FF198C6EE891585327DA4969E8F8A4C82F1CF0FEBC1FD271420C51E39184E60F09D52A75B49CA42D5D485CA9422A457ABDA5C00E1101FFF309B87695D7DB33436053F6C7074BE01A1D5D18686F9712C0C63878A8A57B94A2851160C7565FE747C98D92424580529F1B1C39B816050C197E8343B7C02755C773ACB775085A69F31291689B28C79634DE277D9EC0A6DE12786F8B5E4CB2EF8E86C525676BBDC72DF35229C908A115525C06312012974BB370C40C89636DC069C2158CF57AB0FA657006BAD65EAFD465FC64A0C5F8F3F9003489415899D59A543D8208C54A3166529B53922";

const SKS: &str = "07638FB69868F3D320E5862BD96933FEB311B362093C9B5D50170BCED43F1B536D9A204BB1F22695950BA1F2A9E8EB828B284488760B3FC84FABA04275D5628E39C5B2471374283C503299C0AB49B66B8BBB56A4186624F919A2BA59BB08D8551880C2BEFC4F87F25F59AB587A79C327D792D54C974A69262FF8A78938289E9A87B688B083E0595FE218B6BB1505941CE2E81A5A64C5AAC60417256985349EE47A52420A5F97477B7236AC76BC70E8288729287EE3E34A3DBC3683C0B7B10029FC203418537E7466BA6385A8FF301EE12708F82AAA1E380FC7A88F8F205AB7E88D7E95952A55BA20D09B79A47141D62BF6EB7DD307B08ECA13A5BC5F6B68581C6865B27BBCDDAB142F4B2CBFF488C8A22705FAA98A2B9EEA3530C76662335CC7EA3A00777725EBCCCD2A4636B2D9122FF3AB77123CE0883C1911115E50C9E8A94194E48DD0D09CFFB3ADCD2C1E92430903D07ADBF00532031575AA7F9E7B5A1F3362DEC936D4043C05F2476C07578BC9CBAF2AB4E382727AD41686A96B2548820BB03B32F11B2811AD62F489E951632ABA0D1DF89680CC8A8B53B481D92A68D70B4EA1C3A6A561C0692882B5CA8CC942A8D495AFCB06DE89498FB935B775908FE7A03E324D54CC19D4E1AABD3593B38B19EE1388FE492B43127E5A504253786A0D69AD32601C28E2C88504A5BA599706023A61363E17C6B9BB59BDC697452";

fn get_sk() -> Vec<u8> {
  decode_hex(&SKS).unwrap()
}

fn get_pk() -> Vec<u8> {
  decode_hex(&PKS).unwrap()
}

fn main() {
  let mut pk = [0u8; params::KYBER_PUBLICKEYBYTES];
  let mut sk = [0u8; params::KYBER_SECRETKEYBYTES];
  api::crypto_kem_keypair(&mut pk, &mut sk);
  // dbg!(pk);
  // dbg!(sk);
  // println!("pk: {:x?}", &pk);
  // println!("sk: {:x?}", &sk);

  // let mut sk = get_sk();
  // let pk = get_pk();

  let mut ct = [0u8; params::KYBER_CIPHERTEXTBYTES];
  let mut ss = [0u8; params::KYBER_SSBYTES];

  api::crypto_kem_enc(&mut ct, &mut ss, &pk);

  // println!("ct: {:x?}", &ct);
  // println!("ss: {:x?}", &ss);

  api::crypto_kem_dec(&mut ss, &ct, &mut sk);

}

pub fn decode_hex(s: &str) -> Result<Vec<u8>, ParseIntError> {
  (0..s.len())
      .step_by(2)
      .map(|i| u8::from_str_radix(&s[i..i + 2], 16))
      .collect()
}

pub fn encode_hex(bytes: &[u8]) -> String {
  let mut s = String::with_capacity(bytes.len() * 2);
  for &b in bytes {
      write!(&mut s, "{:02x}", b);
  }
  s
}